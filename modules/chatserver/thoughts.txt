

	GENERAL THOUGHTS ON DESIGN OF CHAT SERVER

	It is hoped that this system can scale to many thousands of users on hundreds of awareNet
	nodes.  The information which must be most efficiently kept in sync between the central
	and client servers are:

		(*) list of chat rooms and memberships.
		(*) set of user logins at client servers.

	Clients should thus regularly check that their state matches the server's, and get updates
	as appropriate.  They should at the same time check for any new chat messages to be routed to
	users logged in locally.

	Proposed method minimize bandwidth use for this operation is to calculate a hash of local
	state to be compared with that on the server.
	
		chatrooms: 12345sha167890
		sessions: 09876sha154321

	If the two are different then hashes for individual subsets should be compared.

		room-[UID]: [objecthash]

	Where object hash is caculated from all mutable state of the Chat_Room object and all 
	memberships.  If this differs from the server the complete object (+ memberships) is
	re-downloaded and hashes re-calculated.

	Likewise, the set of active sessions as a school should be hashed and sent to the server
	regularly.  If the hash does not match the server can request a new list.

	POLLING

	Clients each have a chat.server registry key storing the URL of the chat server.  Clients
	connect at intervals to this server via HTTP POST to:

		http://chatserver.tld/chatserver/check/

	With post body containing a set of key-value pairs, such as:

		ss:	[global_servers_hash]						// assert peer network hash
		gs: [global_sessions_hash]						// asserting global user sessions hash
		ls: [serverUID]|[hash]							// asserting own/local user sessions hash
		cr: [hash]										// asserting hash of all chat room hashes

	This request can also transmit new objects:

		mb: [UID]|userUID|roomUID|role					// asserts membership exists
		ms: [UID]|fromUID|toUID|roomUID|..etc			// asserts new message for room/user
	
	If the server disagrees on a hash then it will respond with the set of objects which should
	be recompared. For example:
	
		rh: [UID]|[hash]								// hash of a chat room
		sh: [UID]|[hash]								// hash of a chat server's active sessions

	The client can then use specialized APIs to access any items it must update.

		http://chatserver.tld/chatserver/getroom/[UID]
		http://chatserver.tld/chatserver/getsessions/[UID]

	To prevent unduie CPU use, hashes should stored and re-used as much as possible, and regenerated
	when the represented set/object changes.
	
	For rooms, servers, hash can be stored on the object itself?

